export default {
    /*
    |--------------------------------------------------------------------------
    | Validation Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines contain the default error messages used by
    | the validator class. Some of these rules have multiple versions such
    | as the size rules. Feel free to tweak each of these messages here.
    |
    */

    accepted: 'The {0} must be accepted.',
    accepted_if: 'The {0} must be accepted when {1} is {2}.',
    active_url: 'The {0} is not a valid URL.',
    after: 'The {0} must be a date after {1}.',
    after_or_equal: 'The {0} must be a date after or equal to {1}.',
    alpha: 'The {0} must only contain letters.',
    alpha_dash: 'The {0} must only contain letters, numbers, dashes and underscores.',
    alpha_num: 'The {0} must only contain letters and numbers.',
    array: 'The {0} must be an array.',
    ascii: 'The {0} must only contain single-byte alphanumeric characters and symbols.',
    before: 'The {0} must be a date before {1}.',
    before_or_equal: 'The {0} must be a date before or equal to {1}.',
    between: {
        array: 'The {0} must have between {1} and {2} items.',
        file: 'The {0} must be between {1} and {2} kilobytes.',
        numeric: 'The {0} must be between {1} and {2}.',
        string: 'The {0} must be between {1} and {2} characters.',
    },
    boolean: 'The {0} field must be true or false.',
    confirmed: 'The {0} confirmation does not match.',
    current_password: 'The password is incorrect.',
    date: 'The {0} is not a valid date.',
    date_equals: 'The {0} must be a date equal to {1}.',
    date_format: 'The {0} does not match the format {1}.',
    decimal: 'The {0} must have {1} decimal places.',
    declined: 'The {0} must be declined.',
    declined_if: 'The {0} must be declined when {1} is {2}.',
    different: 'The {0} and {1} must be different.',
    digits: 'The {0} must be {1} digits.',
    digits_between: 'The {0} must be between {1} and {2} digits.',
    dimensions: 'The {0} has invalid image dimensions.',
    distinct: 'The {0} field has a duplicate value.',
    doesnt_end_with: 'The {0} may not end with one of the following: {1}.',
    doesnt_start_with: 'The {0} may not start with one of the following: {1}.',
    email: 'The {0} must be a valid email address.',
    ends_with: 'The {0} must end with one of the following: {1}.',
    enum: 'The selected {0} is invalid.',
    exists: 'The selected {0} is invalid.',
    file: 'The {0} must be a file.',
    filled: 'The {0} field must have a value.',
    gt: {
        array: 'The {0} must have more than {1} items.',
        file: 'The {0} must be greater than {1} kilobytes.',
        numeric: 'The {0} must be greater than {1}.',
        string: 'The {0} must be greater than {1} characters.',
    },
    gte: {
        array: 'The {0} must have {1} items or more.',
        file: 'The {0} must be greater than or equal to {1} kilobytes.',
        numeric: 'The {0} must be greater than or equal to {1}.',
        string: 'The {0} must be greater than or equal to {1} characters.',
    },
    image: 'The {0} must be an image.',
    in: 'The selected {0} is invalid.',
    in_array: 'The {0} field does not exist in {1}.',
    integer: 'The {0} must be an integer.',
    ip: 'The {0} must be a valid IP address.',
    ipv4: 'The {0} must be a valid IPv4 address.',
    ipv6: 'The {0} must be a valid IPv6 address.',
    json: 'The {0} must be a valid JSON string.',
    lowercase: 'The {0} must be lowercase.',
    lt: {
        array: 'The {0} must have less than {1} items.',
        file: 'The {0} must be less than {1} kilobytes.',
        numeric: 'The {0} must be less than {1}.',
        string: 'The {0} must be less than {1} characters.',
    },
    lte: {
        array: 'The {0} must not have more than {1} items.',
        file: 'The {0} must be less than or equal to {1} kilobytes.',
        numeric: 'The {0} must be less than or equal to {1}.',
        string: 'The {0} must be less than or equal to {1} characters.',
    },
    mac_address: 'The {0} must be a valid MAC address.',
    max: {
        array: 'The {0} must not have more than {1} items.',
        file: 'The {0} must not be greater than {1} kilobytes.',
        numeric: 'The {0} must not be greater than {1}.',
        string: 'The {0} must not be greater than {1} characters.',
    },
    max_digits: 'The {0} must not have more than {1} digits.',
    mimes: 'The {0} must be a file of type: {1}s.',
    mimetypes: 'The {0} must be a file of type: {1}s.',
    min: {
        array: 'The {0} must have at least {1} items.',
        file: 'The {0} must be at least {1} kilobytes.',
        numeric: 'The {0} must be at least {1}.',
        string: 'The {0} must be at least {1} characters.',
    },
    min_digits: 'The {0} must have at least {1} digits.',
    missing: 'The {0} field must be missing.',
    missing_if: 'The {0} field must be missing when {1} is {2}.',
    missing_unless: 'The {0} field must be missing unless {1} is {2}.',
    missing_with: 'The {0} field must be missing when {1}s is present.',
    missing_with_all: 'The {0} field must be missing when {1}s are present.',
    multiple_of: 'The {0} must be a multiple of {1}.',
    not_in: 'The selected {0} is invalid.',
    not_regex: 'The {0} format is invalid.',
    numeric: 'The {0} must be a number.',
    password: {
        letters: 'The {0} must contain at least one letter.',
        mixed: 'The {0} must contain at least one uppercase and one lowercase letter.',
        numbers: 'The {0} must contain at least one number.',
        symbols: 'The {0} must contain at least one symbol.',
        uncompromised: 'The given {0} has appeared in a data leak. Please choose a different {1}.',
    },
    present: 'The {0} field must be present.',
    prohibited: 'The {0} field is prohibited.',
    prohibited_if: 'The {0} field is prohibited when {1} is {2}.',
    prohibited_unless: 'The {0} field is prohibited unless {1} is in {2}s.',
    prohibits: 'The {0} field prohibits {1} from being present.',
    regex: 'The {0} format is invalid.',
    required: 'The {0} field is required.',
    required_array_keys: 'The {0} field must contain entries for: {1}s.',
    required_if: 'The {0} field is required when {1} is {2}.',
    required_if_accepted: 'The {0} field is required when {1} is accepted.',
    required_unless: 'The {0} field is required unless {1} is in {2}s.',
    required_with: 'The {0} field is required when {1}s is present.',
    required_with_all: 'The {0} field is required when {1}s are present.',
    required_without: 'The {0} field is required when {1}s is not present.',
    required_without_all: 'The {0} field is required when none of {1}s are present.',
    same: 'The {0} and {1} must match.',
    size: {
        array: 'The {0} must contain {1} items.',
        file: 'The {0} must be {1} kilobytes.',
        numeric: 'The {0} must be {1}.',
        string: 'The {0} must be {1} characters.',
    },
    starts_with: 'The {0} must start with one of the following: {1}s.',
    string: 'The {0} must be a string.',
    timezone: 'The {0} must be a valid timezone.',
    unique: 'The {0} has already been taken.',
    uploaded: 'The {0} failed to upload.',
    uppercase: 'The {0} must be uppercase.',
    url: 'The {0} must be a valid URL.',
    ulid: 'The {0} must be a valid ULID.',
    uuid: 'The {0} must be a valid UUID.',
}
